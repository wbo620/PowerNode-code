<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.powernode.mybatis.mapper.CarMapper">

    <!--
        1.专门定义一个结果映射，在这个结果映射当中指定数据库表的字段名和JaVa类的属性名的对应关系。
        2.type属性：用来指定P0J0类的类名。
        3.id属性：指定resultMap的唯一标识。这个id将来要在select标签中使用。
    -->
    <resultMap id="carResultMap" type="Car">
        <!--如果数据库表中有主键，一般都是有主键，要不然不符合数据库设计第一范式。-->
        <!--如果有主键，建议这里配置一个id标签，注意：这不是必须的。但是官方的解释是什么呢？这样的配置可以让nybat1s提高效率。-->
        <id property="id" column="id"/>
        <!--property,后面填写POJ0类的属性名-->
        <!--column后面填写数据库表的字段名-->
        <result property="carNum" column="car_num"/>
        <result property="brand" column="brand"/>
        <result property="guidePrice" column="guide_price"/>
        <result property="produceTime" column="produce_time"/>
        <result property="carType" column="car_type"/>
    </resultMap>
    <select id="selectAllResultMap" resultMap="carResultMap">
        select *
        from t_car;
    </select>

    <!--    id是这条sql语句的唯一标识符-->
<!--    插入车辆信息-->
    <insert id="insert">
        insert into t_car(id, car_num, brand, guide_price, produce_time, car_type)
        values (null, #{carNum}, #{brand}, #{guidePrice}, #{produceTime}, #{carType});
    </insert>

<!--
        useGeneratedKeys="true"  使用自动生成的主键值
        keyProperty="id"        指定主键值,赋给对象的哪个属性
-->
    <insert id="insertCarUseGeneratedKey" useGeneratedKeys="true" keyProperty="id">
        insert into t_car(id, car_num, brand, guide_price, produce_time, car_type)
        values (null, #{carNum}, #{brand}, #{guidePrice}, #{produceTime}, #{carType});
    </insert>

<!--    根据Id删除数据-->
    <delete id="deleteById">
        delete
        from t_car
        where id = #{id};
    </delete>

<!--    根据Id查询数据-->
    <select id="selectById" resultType="Car">
        select id, car_num carNum, brand, guide_price guidePrice, produce_time produceTime, car_type carType
        from t_car
        where id = #{id};
    </select>

<!--    使用驼峰命名映射查询数据-->

<!--    查询所有数据-->
    <select id="selectAll" resultType="Car">
        select id, car_num carNum, brand, guide_price guidePrice, produce_time produceTime, car_type carType
        from t_car;
    </select>
    <select id="selectCarByIdAndCarType" resultType="Car">
        select id, car_num carNum, brand, guide_price guidePrice, produce_time produceTime, car_type carType
        from t_car
        where id = #{id}
          and car_type = #{carType};
    </select>
    <select id="selectAllUseUnderscoreToCamelCase" resultType="Car">
        select *
        from t_car;
    </select>
    <select id="selectAlltoList" resultType="Car">
        select id, car_num carNum, brand, guide_price guidePrice, produce_time produceTime, car_type carType
        from t_car;
    </select>
    <select id="selectAlltoListMap" resultType="java.util.Map">
        select *
        from t_car;
    </select>
    <select id="selectAlltoMapMap" resultType="java.util.Map">
        select *
        from t_car;
    </select>
    <select id="selectByIdtoMap" resultType="Map">
        select *
        from t_car
        where id = #{id};
    </select>

    <!--    根据Id更新数据-->
    <update id="updateById" >
        update t_car
        set brand=#{brand}
          ,guide_price= #{guidePrice}
          ,produce_time= #{produceTime}
          , car_type=#{carType}
        where id = #{id};
    </update>


</mapper>